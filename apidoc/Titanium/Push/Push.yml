name: Titanium.Push
summary: Provides methods for accessing Android push notifications from ACS, or another MQTT server.
description: |
    The MQTT protocol is a very lightweight, long lived connection to a server. It is perfect for keeping mobile devices
    in connection with a server, while not significantly degrading their battery life.
    
    In addition to communicating with an MQTT server, this module can also present tray notifications to the user.
    Please refer to the [showTrayNotification](Titanium.Push.showTrayNotification) property to see more information
    about this.
    
    Note that this module is not included in the Titanium namespace, but it is bundled with the Titanium SDK as of
    version 2.0.0. To use it, you must require it, like this:
    
        var Push = require('ti.push');
    
    *WARNING*: The default properties of this module are used until you set a property for the first time. Because the
    properties are persisted to the device settings (via <Titanium.App.Properties>), the most recent value you set will
    always be used.
platforms: [android]
since: "2.0.0"
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }
properties:
  - name: deviceToken
    summary: A token which uniquely identifies this installation of the application.
    description: |
        If you are using this module with the <Titanium.Cloud> module, this is the token that you will need to send when
        you call <Titanium.Cloud.PushNotifications.subscribe> and <Titanium.Cloud.PushNotifications.unsubscribe>.
        
        Note that this token is unique to your application. If you have multiple applications installed on one device,
        the tokens will be different for each of them.
    type: String
    permission: read-only
  - name: enabled
    summary: Whether or not this device will receive push notifications.
    description: |
        You must ask your users before enabling this. Note that once enabled, the application will be able to receive
        notifications at any time, even after the device reboots, regardless of if your application has been run
        recently or not. But if the user intentionally kills your application and its services in their task manager,
        push notifications will be disabled and this property will automatically be set to false.
        
        Also be aware that whenever your application is updated (through the market or through ADB installing a new
        APK), the push service will be stopped until the app is launched for the first time.
        
        Listen for this module's [callback](Titanium.Push.callback) event to receive push notifications once this
        property is set to true.
    type: Boolean
    default: false
  - name: showTrayNotification
    summary: Whether or not to show a tray notification when a new push is received.
    description: |
        If your payload is only a string, it will be used as the contentText and tickerText, and your application's name
        will be used as the contentTitle with a system icon.
        
        Note that in your payload, you can customize this tray notification using any of the properties of a
        <Titanium.Android.Notification>, except for contentIntent and deleteIntent (those are automatically set).
    type: Boolean
    default: true
  - name: showAppOnTrayClick
    summary: Whether or not clicking the tray notification will bring your application to the foreground.
    description: |
        This is only applicable if you have set [showTrayNotification](Titanium.Push.showTrayNotification) to true.
    type: Boolean
    default: true
  - name: showTrayNotificationsWhenFocused
    summary: Whether or not to show tray notifications when your application is in the foreground.
    description: |
        Instead of showing a notification, the [callback](Titanium.Push.callback) event will be immediately fired
        instead.
        
        This is only applicable if you have set [showTrayNotification](Titanium.Push.showTrayNotification) to true.
    type: Boolean
    default: false
  - name: focusAppOnPush
    summary: Whether or not your application is brought to the foreground whenever a new push is received.
    description: |
        Note that this behavior is rather disruptive to users, and is strongly discouraged.
    type: Boolean
    default: false
  - name: host
    summary: The host that will serve push notifications for your application via the MQTT protocol.
    description: |
        To use this module with ACS, you do not need to change this value.
    type: String
    default: api.cloud.appcelerator.com
  - name: port
    summary: The port on which your server is listening for MQTT connections.
    description: |
        To use this module with ACS, you do not need to change this value.
    type: String
    default: 1883
  - name: keepAlive
    summary: The number of seconds between keep-alive pings between the client and the server.
    description: |
        A lower number will mean greater battery drain but also shorter possible delays between push notifications. A
        higher number will mean better battery life but a higher probability of disconnects and longer possible delays
        between push notifications. Changing this value is not recommended.
        
        To use this module with ACS, you do not need to change this value.
    type: Number
    default: 1883
  - name: suffixClientID
    summary: The suffix for all communications with the MQTT server.
    description: |
        To use this module with ACS, you do not need to change this value.
    type: String
    default: CF
events:
  - name: trayClickLaunchedApp
    summary: Fired when a tray notification is shown and the application is not running.
    description: |
        Touching it launches the app, and fires this event.
        
        This is only applicable if you have set [showTrayNotification](Titanium.Push.showTrayNotification) to true.
  - name: trayClickFocusedApp
    summary: Fired when a tray notification is shown and the application is already running.
    description: |
        Touching it focuses the app, and fires this event.
        
        This is only applicable if you have set [showTrayNotification](Titanium.Push.showTrayNotification) to true.
  - name: callback
    summary: Fired whenever a push notification is received.
    description: |
        If your application is not running when a push is received, the push will be saved in a queue until the next
        time you add an event listener for this.
        
        This will only be fired once per push notification.
        
        This event will be fired at different times depending on your settings and the application's present state
        (foreground, background, or not running at all). When [focusAppOnPush](Titanium.Push.focusAppOnPush) is true, this
        will fire as soon as you receive a push. When [showTrayNotification](Titanium.Push.showTrayNotification) is true, this
        will fire as soon as the user touches the tray notification to focus your application. Or, if
        [showTrayNotificationsWhenFocused](Titanium.Push.showTrayNotificationsWhenFocused) is false, and your application is
        in the foreground, it will be called right away. If both [focusAppOnPush](Titanium.Push.focusAppOnPush) 
        and [showTrayNotification](Titanium.Push.showTrayNotification) are false, this will fire the next time your
        application is launched and you add an event listener for it.
        
        You can use the [trayClickLaunchedApp](Titanium.Push.trayClickLaunchedApp) and
        [trayClickFocusedApp](Titanium.Push.trayClickFocusedApp) events to distinguish between the various ways
        a push notification can return a user to your application.
properties:
  - name: payload
    summary: A JSON string of your data payload.
    description: |
        Use JSON.parse to turn this in to an object you can use.
    type: String
examples:
  - title: Listening for Push Notifications
    example: |
        This example lets the user choose if push notifications should be enabled, and listens for several events.
            var Push = require('ti.push');
            Ti.API.info('Device Token: ' + Push.deviceToken);
            var win = Ti.UI.createWindow({
                layout: 'vertical',
                backgroundColor: 'white'
            });
            var enablePush = Ti.UI.createButton({
                title: 'Enable Push Notifications'
            });
            enablePush.addEventListener('click', function () {
                Push.enabled = true;
            });
            win.add(enablePush);
            Push.addEventListener('callback', function (evt) {
                alert(evt.payload);
            });
            Push.addEventListener('trayClickLaunchedApp', function (evt) {
                Ti.API.info('Tray Click Launched App (app was not running)');
            });
            Push.addEventListener('trayClickFocusedApp', function (evt) {
                Ti.API.info('Tray Click Focused App (app was already running)');
            });
            win.open();