---
name: Global
summary: APIs that live in the global scope.
description: |
    Titanium provides a number of global built-in objects. 

    #### JSON

    Titanium has a built-in JSON parser with two main functions: `parse` and `stringify`.  `JSON.parse` will safely evaluate a string encoded as JavaScript into a JavaScript object.  `JSON.stringify` will encode a JavaScript object into a string.

    #### Timers

    Titanium has built-in support for one-shot and repeating timers with two main functions: `setTimeout` and `setInterval`.  `setTimeout` takes 2 arguments: function and timeout in milliseconds after which the function should be executed and returns a timer handle that can be used to cancel a pending timer with `clearTimeout`.  `setInterval` takes 2 arguments: function and timeout in milliseconds for how often the function should be executed until cancelled and returns a timer handle that can be used to cancel a timer with `clearInterval`.

    #### Alert

    Titanium has a built-in convenience function [alert](Global.alert) which can be used 
    as a shortcut to create and show a simple [AlertDialog](Titanium.UI.AlertDialog).

    #### Locale

    The macro `L` can also be used which aliases the method <Titanium.Locale.getString>.

    #### String Formatting

    The following are built-in functions available on the [String](Global.String) class which are Titanium specific and will aid in formatting data into locale-specific strings. These include:

    `String.format`: format a generic string using the [IEEE printf specification](http://www.opengroup.org/onlinepubs/009695399/functions/printf.html).

    `String.formatDate`: format a date into a locale specific date format. Optionally pass a second argument (string) as either "short" (default), "medium" or "long" for controlling the date format.

    `String.formatTime`: format a date into a locale specific time format.

    `String.formatDecimal`: format a number into a locale specific decimal format.

    `String.formatCurrency`: format a number into a locale specific currency format.

methods:
  - name: alert
    summary: Displays a pop-up alert dialog with the passed in `message`.
    description: |
        This function is a shorcut for creating and displaying an
        [AlertDialog](Titanium.UI.AlertDialog). The code:

            alert('Danger, Will Robinson!');

        Is equivalent to:

            Ti.UI.createAlertDialog({ message: 'Danger, Will Robinson!'}).show();

        Note that unlike a web browser-based version of `alert`, the method is 
        asynchronous. However, only one alert dialog will be visible and modal at a time.

        This method is likely to be removed in the future.

    parameters:
      - name: message
        type: String
        summary: The message to show in the alert.
  - name: clearInterval
    summary: Clear an interval timer from being fired.
    parameters:
      - name: timerId
        type: Number
        summary: The timer ID returned by <Global.setInterval>
  - name: clearTimeout
    summary: Clear a timeout timer from being fired.
    parameters:
      - name: timerId
        type: Number
        summary: The timer ID returned by <Global.setTimeout>
  - name: decodeURIComponent
    summary:
        Replaces each URI encoded escape sequence in the passed in `encodedURI`
        with the character that it represents. See the
        [MDN docs for decodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/decodeURIComponent).
    parameters:
      - name: encodedURI
        type: String
        summary: A URI string with encoded escape sequences.
    returns:
        type: String
        summary: The decoded URI String.
  - name: encodeURIComponent
    summary:
        Replaces all URI special characters in the passed in `string` with
        URI escape codes. See the [MDN docs for encodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURIComponent)
    parameters:
      - name: string
        type: String
        summary: "A URI component that needs it's special characters encoded."
    returns:
        type: String
        summary: An encoded URI.
  - name: L
    summary: An alias for <Titanium.Locale.getString>
    parameters:
      - name: key
        type: String
        summary: The lookup key for the localization string
      - name: hint
        type: String
        summary: The text to use if `key` is not found.
        optional: true
    returns:
        type: String
        summary: The value of the localized string defined by `key`.
  - name: require
    summary:
        Loads either a native Titanium module, or a
        [CommonJS module](http://wiki.commonjs.org/wiki/Modules/1.1).
        Titanium modules can be loaded by using their module ID, and JS
        can be loaded by using their `app://` relative path.
    parameters:
      - name: moduleId
        type: String
        summary: The module ID or `app://` relative path.
    returns:
        type: Object
        summary: The `exports` object of the required module.
    examples:
      - title: Require a native module
        example: |
            Require a native module with the ID `com.mycompany.module`
            
                var module = require('com.mycompany.module')
      - title: Require a javascript module
        example: |
            myModule.js:
            
                exports.message = "hello world";
            
            app.js:
            
                var myModule = require('myModule');
                alert(myModule.message);
  - name: setInterval
    summary:
        Creates an interval timer that calls `function` every `delay` milliseconds.
        See the [MDN docs for setInterval](https://developer.mozilla.org/en/DOM/window.setInterval)
    parameters:
      - name: function
        type: Callback
        summary: The function that this interval timer will call.
      - name: delay
        type: Number
        summary: How long the timer will wait between calls to `function`.
    returns:
        type: Number
        summary: A unique timer ID.
    examples:
      - title: Update a label every second, stop updating at 10 seconds
        example: |
            
                var count = 0;
                var timer = setInterval(function() {
                    count++;
                    label.text = "count: " + count;
                    if (count == 10) {
                        clearInterval(timer);
                    }
                }, 1000);
  - name: setTimeout
    summary:
        Creates a timer that calls `function` once after `delay` milliseconds.
        See the [MDN docs for setTimeout](https://developer.mozilla.org/en/DOM/window.setTimeout)
    parameters:
      - name: function
        type: Callback
        summary: The function that the timer will call.
      - name: delay
        type: Number
        summary: How long the timer will wait before calling `function`.
    returns:
        type: Number
        summary: A unique timer ID.
    examples:
      - title: Execute a function in 500 milliseconds
        example: |
            
                setTimeout(function() {
                    Ti.API.debug("called from timer");
                }, 500);
