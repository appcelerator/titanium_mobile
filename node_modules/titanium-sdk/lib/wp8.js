/**
 * Detects the Windows Phone development environment and its dependencies.
 *
 * @module lib/wp8
 *
 * @copyright
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 *
 * @license
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

var fs = require('fs'),
	path = require('path'),
	exec = require('child_process').exec,
	async = require('async'),
	appc = require('node-appc'),
	__ = appc.i18n(__dirname).__,
	cachedResults;

/**
 * Detects current Windows Phone environment.
 * @param {Object} config - The CLI config object
 * @param {Object} opts - Detect options
 * @param {Function} finished - Callback when detection is finished
 */
exports.detect = function detect(finished) {

	if (process.platform != 'win32') {
		finished();
		return;
	}

	if (cachedResults) {
		finished(cachedResults);
		return;
	}

	var programFilesPrefix = process.arch == 'x64' ? 'Program Files (x86)' : 'Program Files',
		results = {
			devices: {},
			issues: []
		};

	async.series([

		// Find the vcvars path
		function (next) {
			var vsPathGuess = path.join('C:', programFilesPrefix, 'Microsoft Visual Studio 11.0');
			if (fs.existsSync(vsPathGuess)) {
				results.visualStudioPath = vsPathGuess;
				results.vcvarsScript = path.join(vsPathGuess, 'VC', 'WPSDK', 'WP80', 'vcvarsphoneall.bat');
				next();
			} else {
				results.issues.push({
					id: 'WINDOWS_STORE_VISUAL_STUDIO_PATH_NOT_FOUND',
					type: 'error',
					message: __('Unable to locate the Visual Studio path.') + '\n' +
						__('Please install Visual Studio 2012 from %s', 'http://www.microsoft.com/visualstudio/'.cyan)
				});
				next(true);
			}
		},

		// Find the SDK path
		function (next) {
			var sdkPathGuess = path.join('C:', programFilesPrefix, 'Microsoft SDKs', 'Windows Phone', 'v8.0');
			if (fs.existsSync(sdkPathGuess)) {
				results.sdkPath = sdkPathGuess;
				results.xapDeployCmd = path.join(sdkPathGuess, 'Tools', 'XAP Deployment', 'XapDeployCmd.exe');
				next();
			} else {
				results.issues.push({
					id: 'WINDOWS_PHONE_SDK_NOT_FOUND',
					type: 'error',
					message: __('Unable to locate the Windows Phone 8 SDK.') + '\n' +
						__('Please install the Windows Phone 8 SDK from %s', 'https://dev.windowsphone.com/en-us/downloadsdk'.cyan)
				});
				next(true);
			}
		},

		// Verify MSBuild is available and is the correct version
		function (next) {
			exec('"' + results.vcvarsScript + '" && MSBuild /version', function (err, stdout, stderr) {
				if (err) {
					results.issues.push({
						id: 'WINDOWS_PHONE_MSBUILD_QUERY_ERROR',
						type: 'error',
						message: __('Error running MSBuild: %s', stderr || err)
					});
				} else {
					stdout = stdout.split('\r\n')[4].trim();
					if (/^4\.0\.[0-9]*.[0-9]*$/.test(stdout)) {
						results.msbuildVersion = stdout;
					} else if (stdout) {
						results.issues.push({
							id: 'WINDOWS_PHONE_INVALID_MSBUILD_VERSION',
							type: 'error',
							message: __('MSBuild must point to the .NET v4.0 MSBuild executable.')
						});
					}
				}
				next(err);
			});
		},

		// Fetch the list of devices
		function (next) {
			if (results.sdkPath) {
				exec('"' + results.xapDeployCmd + '" /EnumerateDevices', function (err, stdout, stderr) {
					if (err) {
						results.issues.push({
							id: 'WINDOWS_PHONE_XAP_DEPLOYMENT_ERROR',
							type: 'error',
							message: __('Error running XapDeployCmd.exe: %s', stderr || err)
						});
					} else {
						var deviceRegex = /^ ([0-9]*)\t\t(.*)$/;
						results.devices = {};
						stdout.split('\r\n').forEach(function (line) {
							var match = deviceRegex.exec(line);
							if (match) {
								results.devices[match[1]] = match[2];
							}
						});
					}
					next(err);
				});
			}
		}

	], function () {
		finished(cachedResults = results);
	});
};
