define(["Ti/_/declare", "Ti/_/dom", "Ti/_/event", "Ti/_/lang", "Ti/_/Evented"],
	function(declare, dom, event, lang, Evented) {
	
	// Ti.Media.Sound is based on tag <audio> of HTML5.
	// Ti.Media.Sound wraps the interface of the <audio> tag, adds basic
	// state management, error checking, and provides interface common for
	// Titanium namespaces.
	
	var doc = document,
		on = require.on,
		mimeTypes = {
			"mp3": "audio/mpeg",
			"ogg": "audio/ogg",
			"wav": "audio/wav"
		},
		INITIALIZED = 1,
		PAUSED = 2,
		PLAYING = 3,
		STARTING = 4,
		STOPPED = 5,
		STOPPING = 6,
		ENDED = 9,
		ABORT = 10,
		ERROR = 11;
	
	return declare("Ti.Media.Sound", Evented, {
		
		constructor: function() {
			this._handles = [];
		},
		
		_currentState: STOPPED,
		
		// Update the state information;
		// fire external events according to changes of the internal state.
		_changeState: function(newState, msg) {
			var cons = this.constants.__values__;
			
			this._currentState = newState;
			cons.playing = PLAYING === newState;
			cons.paused  = PAUSED === newState;
			var evt = {};
			evt['src'] = this;
			switch (this._currentState) {
				case ENDED:
					evt['type'] = 'complete';
					evt['success'] = true;
					if (!this.properties.__values__.looping) {
						this.fireEvent('complete', evt);  // external (interface) event
					}
					break;
				case ERROR: 
					evt['type'] = 'error';	
					evt['message'] = msg;
					this.fireEvent('error', evt);  // external (interface) event
					break;
			}
		},
		
		_durationChange: function() {
			var d = this._audio.duration*1000;
			if (d !== Infinity) {
				this.constants.__values__.duration = Math.floor(d);
			}
		},
		
		_error: function() {
			var msg = "Unknown error";
			switch (this._audio.error.code) {
				case 1: msg = "Aborted"; break;
				case 2: msg = "Decode error"; break;
				case 3: msg = "Network error"; break;
				case 4: msg = "Unsupported format";break;
			}
			this._changeState(ERROR, "error: " + msg);
		},
		
		// isRelease: if true, the <audio> tag will be destroyed and recreated.
		// if false, and the tag has been already created, nothing will happen.
		_createAudio: function(isRelease) {
			var self = this,
				audio = self._audio,
				url = self.url,
				props = self.properties.__values__,
				i, attr, match;
			
			if (!url) {
				return;
			}
			
			if (audio && audio.parentNode && !isRelease) {
				return audio;
			}
			
			self.release();
			
			audio = self._audio = dom.create("audio");
			
			// Handlers of events generated by the <audio> tag. 
			// These events are handled here and do not propagate outside.
			self._handles = [
				on(audio, "playing", self, function() {
					self._changeState(PLAYING, "playing");
				}),
				on(audio, "play", self, function() {
					self._changeState(STARTING, "starting");
				}),
				on(audio, "pause", self, function() {
					if (self._currentState === STOPPING) {
						self._stop();
					} else {
						self._changeState(PAUSED, "paused");	
					}
				}),
				on(audio, "ended", self, function() {
					self._changeState(ENDED, "ended");
				}),
				on(audio, "abort", self, function() {
					self._changeState(ABORT, "abort");
				}),
				on(audio, "timeupdate", self, function() {
					self._currentState === STOPPING && self.pause();
				}),
				on(audio, "error", self, "_error"),
				on(audio, "canplay", self, function() {
					self._initialized = 1;
					
					//Audio has just initialized
					self._audio.volume = props.volume;
					self._audio.loop = props.looping;
					self._audio.currentTime = props.time/1000;
									
					self._changeState(INITIALIZED, "initialized");
					
					self._nextCmd && self._nextCmd();
					self._nextCmd = 0;
				}),				
				on(audio, "durationchange", self, "_durationChange")
			];
			
			doc.body.appendChild(audio);
			
			//Set "url" into tag <source> of tag <audio>
			require.is(url, "Array") || (url = [url]);
			
			for (i = 0; i < url.length; i++) {
				attr = {src: url[i]};
				match = url[i].match(/.+\.([^\/\.]+?)$/);
				match && mimeTypes[match[1]] && (attr.type = mimeTypes[match[1]]);
				dom.create("source", attr, audio);
			}

			return audio;
		},
		
		// Methods
		
		// Remove the <audio> tag from the DOM tree
		release: function() {
			var audio = this._audio,
				parent = audio && audio.parentNode,
				c = this.constants.__values__;
				
			this._currentState = STOPPED;
			c.playing = c.paused = false;
			this._initialized = this._nextCmd = 0;
			if (parent) {
				event.off(this._handles);
				parent.removeChild(audio);
			}
			this._audio = 0;
		},
		
		// _nextCmd: this variable records the command that was requested before the <audio> tag 
		// was initialized. It will be executed when the tag becomes initialized.
		
		pause: function() {
			var audio;
			this._nextCmd = this.pause;
			this._initialized && this._currentState === PLAYING && (audio = this._createAudio()) && audio.pause();
		},
		
		start: function() {
			var audio;
			this._nextCmd = this.start;
			this._initialized && this._currentState !== PLAYING && (audio = this._createAudio()) && audio.play();
		},
		
		play: function() {
			this.start();
		},
		
		_stop: function() {
			var a = this._audio;
				
			a.currentTime = 0;
			this._changeState(STOPPED, "stopped");

			// Some versions of Webkit has a bug: if <audio>'s current time is non-zero and we try to 
			// stop it by setting time to 0 and pausing, it won't work: music is paused, but time is 
			// not reset. This is a work around.
			if (a.currentTime !== 0) {
				a.load();
			}
		},
		
		stop: function() {
			this._nextCmd = 0;
			if (!this._initialized) {
				return;
			}
				
			var a = this._audio;
			if (!a)
				return;
				
			if (this._currentState === PAUSED) {
				this._stop();
			} else {
				this._changeState(STOPPING, "stopping");
				a.pause();
			}
		},
		
		reset: function() {
			this.time = 0;
		},
		
		isLooping: function() {
				return this.properties.__values__.looping;
		},
		
		isPaused: function() {
				return this.constants.__values__.paused; 
		},
		
		isPlaying: function() {
				return this.constants.__values__.playing;
		},
		
		constants: {
			paused: false,
			playing: false,
			duration: 0
		},
		
		properties: {
		
			url: {
				set: function(value) {
					var props = this.properties.__values__,
						cons = this.constants.__values__;
						
					if (!value || value === props.url) {
						return;
					}
					
					cons.playing = cons.paused  = false;
					this._currentState = STOPPED;
					props.url = value;
					this._createAudio(1/*Release*/);
					this.time = this._nextCmd = this._initialized = 0;
					return value;
				}
			},

			// The following 3 properties mirror (cache) the according properties of the <audio> tag:
			// volume, time, looping.
			//
			// Reason: if the <audio> tag is not initialized, direct referencing of the tag's properties
			// leads to exception. To prevent this situation, we mirror the properties and use them
			// if the tag's properties cannot be accessed at the moment.

			volume: {
				value: 1.0,
				set: function(value) {
					var props = this.properties.__values__;
					props.volume = Math.max(0, Math.min(1, value));
					this._initialized && this._audio && (this._audio.volume = props.volume);
					return value;
				}
			},

			time: {
				value: 0,
				get: function() {
					return this._initialized && this._audio ? Math.floor(this._audio.currentTime * 1000) : this.properties.__values__.time;
				},
				set: function(value) {
					this.properties.__values__.time = value;
					this._initialized && this._audio && (this._audio.currentTime = value/1000);
					return value;
				}
			},
			
			looping: {
				value: false,
				set: function(value) {
					this.properties.__values__.looping = value;
					this._initialized && this._audio && (this._audio.loop = value);
					return value;
				}
			}
		}
	});

});
