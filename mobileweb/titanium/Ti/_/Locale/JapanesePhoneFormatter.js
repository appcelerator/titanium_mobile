define(function() {
	// Based on Android's 4.1.1 algorithm and format rules

	// Japanese Phone number formatting rule is a bit complicated.
	// Here are some valid examples: 022-229-1234, 0223-23-1234, 022-301-9876, 015-482-7849,
	// 0154-91-3478, 01547-5-4534, 0570-000-000, 0276-00-0000, 090-1234-1234, 080-0123-6789
	// As you can see, there is no straight-forward rule here.
	// In order to handle this, a big array is prepared.
	var FORMAT_MAP = [
		-100,10,220,-15,410,530,1200,670,780,1060,
		-100,-25,20,40,70,100,150,190,200,210,
		-36,-100,-100,-35,-35,-35,30,-100,-100,-100,
		-35,-35,-35,-35,-35,-35,-35,-45,-35,-35,
		-100,-100,-100,-35,-35,-35,-35,50,-35,60,
		-35,-35,-45,-35,-45,-35,-35,-45,-35,-35,
		-35,-35,-45,-35,-35,-35,-35,-45,-45,-35,
		-100,-100,-35,-35,-35,80,90,-100,-100,-100,
		-35,-35,-35,-35,-35,-35,-45,-45,-35,-35,
		-35,-35,-35,-35,-35,-35,-45,-35,-35,-35,
		-25,-25,-35,-35,110,120,130,-35,140,-25,
		-35,-25,-35,-35,-35,-35,-35,-45,-25,-35,
		-35,-25,-35,-35,-35,-35,-35,-25,-45,-35,
		-35,-35,-35,-35,-45,-35,-35,-35,-35,-35,
		-35,-35,-35,-35,-35,-35,-45,-45,-35,-35,
		-100,-100,-35,160,170,180,-35,-35,-100,-100,
		-35,-35,-45,-35,-45,-45,-35,-35,-35,-35,
		-35,-35,-35,-35,-35,-35,-35,-35,-45,-35,
		-35,-35,-35,-35,-45,-45,-45,-35,-45,-35,
		-25,-25,-35,-35,-35,-35,-35,-25,-35,-35,
		-25,-25,-35,-35,-35,-35,-35,-35,-25,-25,
		-25,-35,-35,-35,-35,-35,-25,-35,-35,-25,
		-100,-100,230,250,260,270,320,340,360,390,
		-35,-25,-25,240,-35,-35,-35,-25,-35,-35,
		-25,-35,-35,-35,-25,-25,-25,-25,-25,-25,
		-25,-25,-25,-35,-35,-35,-25,-35,-35,-25,
		-35,-35,-35,-35,-35,-25,-35,-35,-35,-25,
		-35,-25,-25,-25,-35,280,290,300,310,-35,
		-25,-25,-25,-25,-25,-25,-25,-35,-35,-25,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-25,-25,-35,-35,-35,-25,-25,-25,-25,-25,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-35,-35,-25,-35,330,-35,-35,-35,-35,-35,
		-25,-35,-35,-35,-35,-35,-25,-25,-25,-25,
		-35,-25,-25,-25,-35,-25,-35,-35,350,-35,
		-25,-35,-35,-35,-35,-35,-35,-35,-25,-25,
		-35,-25,-35,370,-35,-35,-25,-35,-35,380,
		-25,-35,-35,-25,-25,-35,-35,-35,-35,-35,
		-25,-35,-25,-25,-25,-25,-35,-35,-35,-35,
		-25,-35,-25,400,-35,-35,-35,-35,-25,-35,
		-25,-35,-35,-35,-35,-25,-25,-25,-25,-25,
		-15,-15,420,460,-25,-25,470,480,500,510,
		-15,-25,430,-25,-25,-25,-25,-25,440,450,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-25,-25,-35,-35,-25,-25,-25,-35,-35,-35,
		-15,-25,-15,-15,-15,-15,-15,-25,-25,-15,
		-25,-25,-25,-25,-25,-25,-35,-25,-35,-35,
		-35,-25,-25,-35,-25,-35,-35,-35,-25,-25,
		490,-15,-25,-25,-25,-35,-35,-25,-35,-35,
		-15,-35,-35,-35,-35,-35,-35,-35,-35,-15,
		-35,-25,-25,-25,-25,-25,-25,-25,-25,-25,
		-25,-25,-25,-35,-35,-35,-25,-25,-25,520,
		-100,-100,-45,-100,-45,-100,-45,-100,-45,-100,
		-26,-100,-25,540,580,590,600,610,630,640,
		-25,-35,-35,-35,-25,-25,-35,-35,-35,550,
		-35,-35,-25,-25,-25,-25,560,570,-25,-35,
		-35,-35,-35,-35,-25,-25,-25,-25,-25,-25,
		-25,-25,-25,-25,-35,-25,-25,-35,-25,-25,
		-25,-25,-25,-25,-35,-35,-25,-35,-35,-25,
		-35,-35,-25,-35,-35,-35,-35,-35,-35,-25,
		-100,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-36,-100,-35,-35,-35,-35,620,-35,-35,-100,
		-35,-35,-35,-35,-35,-35,-35,-35,-35,-45,
		-25,-35,-25,-25,-35,-35,-35,-35,-25,-25,
		-25,-25,-25,-25,-35,-35,-35,650,-35,660,
		-35,-35,-35,-35,-45,-35,-35,-35,-35,-45,
		-35,-35,-35,-35,-35,-35,-35,-35,-35,-25,
		-26,-100,680,690,700,-25,720,730,-25,740,
		-25,-35,-25,-25,-25,-35,-25,-25,-25,-25,
		-25,-25,-25,-25,-25,-35,-35,-35,-35,-35,
		-35,-100,-35,-35,-35,-35,710,-35,-35,-35,
		-35,-35,-35,-35,-35,-35,-35,-35,-45,-35,
		-25,-35,-25,-35,-25,-35,-35,-35,-35,-25,
		-35,-35,-35,-35,-35,-25,-35,-25,-35,-35,
		-35,-35,-25,-25,750,760,770,-35,-35,-35,
		-25,-35,-25,-25,-25,-25,-35,-35,-35,-25,
		-25,-35,-35,-35,-35,-25,-25,-35,-35,-25,
		-25,-35,-35,-35,-35,-35,-25,-25,-35,-35,
		790,-100,800,850,900,920,940,1030,1040,1050,
		-36,-26,-26,-26,-26,-26,-26,-26,-26,-26,
		-35,-25,-25,-35,810,-25,-35,-35,-25,820,
		-25,-35,-25,-25,-35,-35,-35,-35,-35,-25,
		-25,-35,830,-35,840,-35,-25,-35,-35,-25,
		-35,-25,-25,-25,-25,-25,-25,-25,-25,-25,
		-100,-25,-25,-25,-100,-100,-100,-100,-100,-100,
		-25,-25,-35,-35,-35,-35,860,-35,870,880,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-35,-35,-35,-35,-35,-35,-35,-45,-45,-35,
		-100,-100,-100,-100,-100,-100,890,-100,-100,-100,
		-25,-45,-45,-25,-45,-45,-25,-45,-45,-45,
		-25,-25,-25,-25,-25,-35,-35,910,-35,-25,
		-35,-35,-35,-35,-35,-35,-35,-45,-35,-35,
		-100,930,-35,-35,-35,-35,-35,-35,-35,-35,
		-100,-100,-45,-100,-45,-100,-100,-100,-100,-100,
		-25,-25,-25,950,-25,970,990,-35,1000,1010,
		-35,-35,-35,-35,-35,-35,960,-35,-35,-35,
		-45,-45,-45,-45,-45,-45,-35,-45,-45,-45,
		-35,-35,-25,-35,-35,980,-35,-35,-35,-35,
		-100,-100,-25,-25,-100,-100,-100,-100,-100,-100,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-35,
		-25,-35,-35,-35,-35,-35,-35,-35,-35,-25,
		-25,-35,-35,-35,-25,-25,-35,-35,-35,1020,
		-45,-45,-35,-35,-45,-45,-45,-45,-45,-45,
		-25,-25,-25,-25,-25,-35,-25,-35,-25,-35,
		-35,-25,-25,-35,-35,-35,-25,-35,-25,-35,
		-25,-25,-35,-35,-35,-35,-35,-35,-35,-25,
		-26,-100,1070,1080,1090,1110,1120,1130,1140,1160,
		-35,-25,-25,-25,-25,-25,-25,-25,-25,-25,
		-35,-25,-25,-25,-25,-25,-25,-25,-25,-25,
		-35,-100,-35,-35,-35,-100,-35,-35,-35,1100,
		-35,-35,-35,-35,-35,-35,-45,-35,-35,-35,
		-35,-25,-35,-25,-35,-35,-35,-35,-25,-35,
		-25,-25,-25,-25,-35,-35,-35,-35,-35,-35,
		-25,-25,-35,-35,-35,-25,-25,-35,-35,-35,
		1150,-25,-35,-35,-35,-35,-35,-35,-25,-25,
		-35,-35,-45,-35,-35,-35,-35,-35,-35,-35,
		-35,1170,-25,-35,1180,-35,1190,-35,-25,-25,
		-100,-100,-45,-45,-100,-100,-100,-100,-100,-100,
		-25,-35,-35,-35,-35,-35,-35,-25,-25,-35,
		-35,-35,-35,-35,-35,-35,-35,-35,-35,-45,
		-26,-15,-15,-15,-15,-15,-15,-15,-15,-15];

	// Removes dashes and spaces from the string.
	function removeDashesAndSpaces(s) {
		return (s + "").replace(/[- ]/g, ''); //do we need to remove spaces or only dashes?
	}

	return {
		formatJapaneseNumber: function (s) {
			function insertSubString (s, subString, position) {
				return s.substr(0, position) + subString + s.substr(position);
			}

			s = s + "";
			// validate basic rules: number starts from +81 or starts from 0. Number has only digits, dashes or spaces
			if (!s.match(/^(([\+][8][1])|([0]))([\d -]{3,15})$/)) {
				//provided phone number is not valid Japanese phone number.
				return s;
			}

			// Here, "root" means the position of "'"  0'3, 0'90, and +81'-90 (dash will be deleted soon, so it is actually +81'90).
			var rootIndex = (s.charAt(0) == '+') ? 3 : 1,
				result = s;

			// Strip the dashes first, as we're going to add them back
			s = removeDashesAndSpaces(s);
			var l = s.length,
				i = rootIndex,
				base = 0;

			while (i < l) {
				var ch = parseInt(s.charAt(i)),
					value = FORMAT_MAP[base + ch];

				if (value < 0) {
					if (value <= -100) {
						return result; //internal terminator
					}

					var dashPos2 = rootIndex + (Math.abs(value) % 10);
					if (l > dashPos2) {
						s = insertSubString(s, "-", dashPos2);
					}

					var dashPos1 = rootIndex + (Math.abs(value) / 10);
					if (l > dashPos1) {
						s = insertSubString(s, "-", dashPos1);
					}
					break;
				} else {
					base = value;
					i++;
				}
			}
			if (length > 3 && rootIndex == 3) {
				s = insertSubString(s, "-", rootIndex);
			}
			return s;
		}
	};
});