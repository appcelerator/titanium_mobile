name: Build
on: [push, pull_request]
# TODO: Can we split things up in a more intutive way?
# i.e. an "Android" job which does the android/java linting and build
# an iOS job which does the swift/ios linting and build
# a JS/CLI job which does the js linting (and cli tests?)
# a packaging job which generates the combined SDK from ios/Android?

jobs:
  android:
    runs-on: ubuntu-latest
    name: Android
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-

    - run: npm ci
      name: Install dependencies

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - run: npm run lint:android
      name: Lint

    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

  ios:
    runs-on: macos-latest
    name: iOS
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-

    - run: npm ci
      name: Install dependencies

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - run: npm run lint:ios
      name: Lint

    - run: npm run build -- --all
      name: Build

    - run: npm run package -- --all
      name: Package

    - name: Archive OSX artifact
      uses: actions/upload-artifact@v2
      with:
        name: mobilesdk-osx.zip
        path: |
          dist/mobilesdk-*-osx.zip

    - name: Archive win32 artifact
      uses: actions/upload-artifact@v2
      with:
        name: mobilesdk-win32.zip
        path: |
          dist/mobilesdk-*-win32.zip

    # - name: Archive Linux artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: mobilesdk-linux.zip
    #     path: |
    #       dist/mobilesdk-*-linux.zip

    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

  js:
    runs-on: ubuntu-latest
    name: JavaScript
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-

    - run: npm ci
      name: Install dependencies

    - run: npm run lint:js
      name: Lint