/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

package org.appcelerator.titanium.util;

import java.lang.reflect.Method;

import org.appcelerator.titanium.ITiAppInfo;
import org.appcelerator.titanium.TiApplication;

/**
 * This is a resource (R.java) helper class that shims in a dynamically
 * generated class (RA) that is generated at compile time which maps static
 * resource keys to their int counterparts (same essentially as R) to allow
 * us to quickly reference these resource ids with string keys.
 */
public class TiResourceHelper
{
	private static Class raClass;
	private static Method drawableMethod;
	private static Method stringMethod;
	
	public static void initialize(TiApplication app) 
	{
	    try
	    {
	        // this is the class that is generated by the Titanium compiler
	        // when compiling an end-application and it comes from parsing R.java
	        String className = app.getAppInfo().getId()+".RA";
    	    raClass = Class.forName(className);
    	    try 
    	    {
        	    // look up the drawable generated method
        	    drawableMethod = raClass.getMethod("getDrawable",String.class);
    	    }
    	    catch (NoSuchMethodException nme) {}
    	    try 
    	    {
        	    // look up the string generated method
        	    stringMethod = raClass.getMethod("getString",String.class);
    	    }
    	    catch (NoSuchMethodException nme) {}
	    }
	    catch(Exception ig) 
	    {
	        // this can never happen or we're screwed
	        ig.printStackTrace();
	    }
	}

    public static final int getDrawable(String key)
    {
        //TODO: need to do any path/name translation here
        if (drawableMethod!=null)
        {
            try
            {
                Number value = (Number)drawableMethod.invoke(null,key);
                return value.intValue();
            }
            catch(java.lang.Exception i) {
            }
        }
        return 0x0;
    }
    
    public static final int getString(String key)
    {
        if (stringMethod!=null)
        {
            try
            {
                Number value = (Number)stringMethod.invoke(null,key);
                return value.intValue();
            }
            catch(java.lang.Exception i){
            }
        }
        return 0x0;
    }
}